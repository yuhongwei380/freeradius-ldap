######################################################################
#
#	As of 2.0.0, FreeRADIUS supports virtual hosts using the
#	"server" section, and configuration directives.
#
#	Virtual hosts should be put into the "sites-available"
#	directory.  Soft links should be created in the "sites-enabled"
#	directory to these files.  This is done in a normal installation.
#
#	If you are using 802.1X (EAP) authentication, please see also
#	the "inner-tunnel" virtual server.  You will likely have to edit
#	that, too, for authentication to work.
#
#	$Id$
#
######################################################################
#
#	Read "man radiusd" before editing this file.  See the section
#	titled DEBUGGING.  It outlines a method where you can quickly
#	obtain the configuration you want, without running into
#	trouble.  See also "man unlang", which documents the format
#	of this file.
#
#	This configuration is designed to work in the widest possible
#	set of circumstances, with the widest possible number of
#	authentication methods.  This means that in general, you should
#	need to make very few changes to this file.
#
#	The best way to configure the server for your local system
#	is to CAREFULLY edit this file.  Most attempts to make large
#	edits to this file will BREAK THE SERVER.  Any edits should
#	be small, and tested by running the server with "radiusd -X".
#	Once the edits have been verified to work, save a copy of these
#	configuration files somewhere.  (e.g. as a "tar" file).  Then,
#	make more edits, and test, as above.
#
#	There are many "commented out" references to modules such
#	as ldap, sql, etc.  These references serve as place-holders.
#	If you need the functionality of that module, then configure
#	it in radiusd.conf, and un-comment the references to it in
#	this file.  In most cases, those small changes will result
#	in the server being able to connect to the DB, and to
#	authenticate users.
#
######################################################################

server default {
#
#  If you want the server to listen on additional addresses, or on
#  additional ports, you can use multiple "listen" sections.
#
#  Each section make the server listen for only one type of packet,
#  therefore authentication and accounting have to be configured in
#  different sections.
#
#  The server ignore all "listen" section if you are using '-i' and '-p'
#  on the command line.
#
listen {
	type = auth
	ipaddr = *
	port = 0
	limit {
		max_connections = 16
		lifetime = 0
		idle_timeout = 30
	}
}

listen {
	ipaddr = *
	port = 0
	type = acct
	limit {
#		max_pps = 0
#		idle_timeout = 0
#		lifetime = 0
#		max_connections = 0
	}
}

listen {
	type = auth
	ipv6addr = ::
	port = 0
	limit {
		max_connections = 16
		lifetime = 0
		idle_timeout = 30
	}
}

listen {
	ipv6addr = ::
	port = 0
	type = acct
	limit {
#		max_pps = 0
#		idle_timeout = 0
#		lifetime = 0
#		max_connections = 0
	}
}

authorize {
	# 用户名合法性过滤
	filter_username

	# 预处理
	preprocess

	# CHAP/MS-CHAP 检测
	chap
	mschap

	# 若需要 SIP digest
	digest

	# 先查询 LDAP，拿到用户 DN / 属性
	ldap

	# 有明文口令（PAP/TTLS/PAP/PEAP-GTC）且未设置认证类型时，强制走 LDAP 简单绑定
	if ((ok || updated) && User-Password && !control:Auth-Type) {
		update control {
			Auth-Type := LDAP
		}
	}

	# 域后缀处理
	suffix

	# EAP 初始握手早退（无 EAP-Message 时为 noop）
	eap {
		ok = return
#		updated = return
	}

	# users 文件
	files

	# SQL（如未使用保持注释）
	-sql

	# 过期与时段控制
	expiration
	logintime

	# 重要：防止 PAP 将 Password-With-Header 改写成 Cleartext-Password，
	# 抢走认证流程并用 NT 哈希做本地比对。
	if (&control:Password-With-Header) {
		update control {
			Password-With-Header !* ANY
		}
	}

	# 最后交给 PAP（若上面未设 Auth-Type 或其他模块未占用认证）
	pap

	Autz-Type New-TLS-Connection {
		ok
	}
}

authenticate {
	Auth-Type PAP {
		pap
	}

	Auth-Type CHAP {
		chap
	}

	Auth-Type MS-CHAP {
		mschap
	}

	# 旧配置兼容
	mschap

	# Digest 认证（如需要）
	digest

	# 简单绑定：当 authorize 段设定了 Auth-Type = LDAP 时走这里（完成预认证）
	Auth-Type LDAP {
		ldap
	}

	# 允许 EAP
	eap
}

preacct {
	preprocess
#	acct_counters64
#	update request {
#	  	&FreeRADIUS-Acct-Session-Start-Time = "%{expr: %l - %{%{Acct-Session-Time}:-0} - %{%{Acct-Delay-Time}:-0}}"
#	}
	acct_unique
#	IPASS
	suffix
#	ntdomain
	files
}

accounting {
#	cui
	detail
#	daily
	unix
#	radutmp
#	sradutmp
#	sqlippool
	-sql
#	if (noop) {
#		ok
#	}
#	pgsql-voip
	exec
	attr_filter.accounting_response
#	Acct-Type Status-Server {
#	}
}

session {
#	radutmp
#	sql
}

post-auth {
#	if (!&reply:State) {
#		update reply {
#			State := "0x%{randstr:16h}"
#		}
#	}
#	verify_tls_client_common_name
#	if (&EAP-Message && !&Stripped-User-Name && &TLS-Client-Cert-Serial) {
#		update request {
#			&Stripped-User-Name := "%{%{TLS-Client-Cert-Subject-Alt-Name-Email}:-%{%{TLS-Client-Cert-Common-Name}:-%{TLS-Client-Cert-Serial}}}"
#		}
#		update reply {
#			Class += "%{md5:%{Calling-Station-Id}%{Called-Station-Id}%{TLS-Client-Cert-Subject-Alt-Name-Email}%{TLS-Client-Cert-Common-Name}%{TLS-Client-Cert-Serial}%{NAS-IPv6-Address}%{NAS-IP-Address}%{NAS-Identifier}%{NAS-Port}"
#		}
#	}

	if (session-state:User-Name && reply:User-Name && request:User-Name && (reply:User-Name == request:User-Name)) {
		update reply {
			&User-Name !* ANY
		}
	}
	update {
		&reply: += &session-state:
	}

#	sqlippool
#	cui
#	sql_session_start
#	reply_log
	-sql
#	ldap
	exec

#	wimax

#	update reply {
#	       Reply-Message += "%{TLS-Cert-Serial}"
#	       Reply-Message += "%{TLS-Cert-Expiration}"
#	       Reply-Message += "%{TLS-Cert-Subject}"
#	       Reply-Message += "%{TLS-Cert-Issuer}"
#	       Reply-Message += "%{TLS-Cert-Common-Name}"
#	       Reply-Message += "%{TLS-Cert-Subject-Alt-Name-Email}"
#	       Reply-Message += "%{TLS-Client-Cert-Serial}"
#	       Reply-Message += "%{TLS-Client-Cert-Expiration}"
#	       Reply-Message += "%{TLS-Client-Cert-Subject}"
#	       Reply-Message += "%{TLS-Client-Cert-Issuer}"
#	       Reply-Message += "%{TLS-Client-Cert-Common-Name}"
#	       Reply-Message += "%{TLS-Client-Cert-Subject-Alt-Name-Email}"
#	}

#	insert_acct_class

#	if (&reply:EAP-Session-Id) {
#		update reply {
#			EAP-Key-Name := &reply:EAP-Session-Id
#		}
#	}

	remove_reply_message_if_eap

	Post-Auth-Type REJECT {
		-sql
		attr_filter.access_reject
		eap
		remove_reply_message_if_eap
	}

	Post-Auth-Type Challenge {
#		remove_reply_message_if_eap
#		attr_filter.access_challenge.post-auth
	}

	Post-Auth-Type Client-Lost {
#		%{debug_attr:&session-state:TLS-Session-Information[*]}
#		%{debug_attr:&session-state:TLS-Session-Information[n]}
#		%{debug_attr:&session-state:Module-Failure-Message}
	}

	if (EAP-Key-Name && &reply:EAP-Session-Id) {
		update reply {
			&EAP-Key-Name := &reply:EAP-Session-Id
		}
	}
}

pre-proxy {
#	operator-name
#	cui
#	files
#	attr_filter.pre-proxy
#	pre_proxy_log
}

post-proxy {
#	post_proxy_log
#	attr_filter.post-proxy
	eap
#	Post-Proxy-Type Fail-Accounting {
#			detail.example.com
#	}
}
}
