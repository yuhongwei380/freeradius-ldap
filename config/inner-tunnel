# -*- text -*-
######################################################################
#
#	This is a virtual server that handles *only* inner tunnel
#	requests for EAP-TTLS and PEAP types.
#
#	$Id$
#
######################################################################

server inner-tunnel {

listen {
       ipaddr = 127.0.0.1
       port = 18120
       type = auth
}

authorize {
	# 基础过滤
	filter_username
	# 可按需开启
#	filter_inner_identity

	# CHAP 自动设置 Auth-Type := CHAP
	chap

	# MS-CHAP 自动设置 Auth-Type := MS-CHAP
	#（注意：仅当以后希望用 MS-CHAPv2 时）
	mschap

	# 处理 user@realm
	suffix

	# 不代理 inner-tunnel 请求
	update control {
		&Proxy-To-Realm := LOCAL
	}

	# EAP 解析（CHANGED: 移除 ok = return，避免短路后面的 ldap）
	eap

	# CHANGED: 在 authorize 阶段执行 LDAP 查询（不带负号，确保执行）
	ldap

	# CHANGED: 如果有明文口令（TTLS/PAP 或 PEAP-GTC），且尚未设置 Auth-Type，则改走 LDAP simple bind
	if ((ok || updated) && User-Password && !control:Auth-Type) {
		update control {
			Auth-Type := LDAP
		}
	}

	# 其余本地策略
	files
	-sql

	# 到期等策略
	expiration
	logintime

	# 保留 PAP（放在最后）
	pap
}

authenticate {
	# PAP
	Auth-Type PAP {
		pap
	}

	# CHAP
	Auth-Type CHAP {
		chap
	}

	# MS-CHAPv2（使用 mschap，本地校验 NT-Password）
	Auth-Type MS-CHAP {
		mschap
	}

	# 兼容旧写法
	mschap

	# 如需 PAM 可启用
#	pam

	# CHANGED: LDAP simple bind（用于 TTLS/PAP 或 PEAP-GTC 的预认证 + 当前认证）
	Auth-Type LDAP {
		ldap
	}

	# EAP 认证
	eap
}

session {
	radutmp
#	sql
}

post-auth {
#	update outer.session-state {
#	       User-Name := &User-Name
#	}

#	reply_log
	-sql

	# 某些目录策略后置
	ldap

	# 如需 use_tunneled_reply，可改 if(0) 为 if(1)
	if (0) {
		update reply {
			User-Name !* ANY
			Message-Authenticator !* ANY
			EAP-Message !* ANY
			Proxy-State !* ANY
			MS-MPPE-Encryption-Types !* ANY
			MS-MPPE-Encryption-Policy !* ANY
			MS-MPPE-Send-Key !* ANY
			MS-MPPE-Recv-Key !* ANY
		}
		update {
			&outer.session-state: += &reply:
		}
	}

	Post-Auth-Type REJECT {
		-sql
		attr_filter.access_reject
		update outer.session-state {
			&Module-Failure-Message := &request:Module-Failure-Message
		}
	}
}

pre-proxy {
#	files
#	attr_filter.pre-proxy
#	pre_proxy_log
}

post-proxy {
#	post_proxy_log
#	attr_filter.post-proxy
	eap
}

} # inner-tunnel server block
